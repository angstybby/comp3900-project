generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "postgresql"
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  zid           String         @id
  email         String         @unique
  userType      UserType
  password      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  profile       Profile?
  isAdmin       Boolean        @default(false)
  resetToken    String?        @unique
  notifications Notification[]
}

model Skills {
  id          Int           @id @default(autoincrement())
  skillName   String        @unique
  createdAt   DateTime      @default(now())
  Profile     Profile[]
  Course      Course[]
  Group       Group[]
  Project     Project[]
  CourseSkill CourseSkill[]
}

model CourseSkill {
  courseId String
  course   Course @relation(fields: [courseId], references: [id])
  skillId  Int
  skill    Skills @relation(fields: [skillId], references: [id])
  rating   Int

  @@id([courseId, skillId])
}

enum UserType {
  student
  academic
  admin
}

model Profile {
  zid            String          @id
  profileOwner   User            @relation(fields: [zid], references: [zid])
  profilePicture String?         @db.LongText
  fullname       String
  description    String?         @db.Text
  resume         String?
  Group          Group[]
  ProjectOwner   Project[]
  CourseTaken    CourseTaken[]
  Skills         Skills[]
  GroupJoined    GroupJoined[]
  GroupInterest  GroupInterest[]
  feedbackGiven  Feedback[]       @relation("FromProfile")
  feedbackReceived  Feedback[]    @relation("ToProfile")
  CareerPath     String?         @db.Text
}

model Course {
  id          String        @id
  courseName  String
  skills      Skills[]
  summary     String?       @db.Text
  CourseTaken CourseTaken[]
  CourseSkill CourseSkill[]
}

model CourseTaken {
  zid          String
  profileOwner Profile @relation(fields: [zid], references: [zid])
  courseId     String
  course       Course  @relation(fields: [courseId], references: [id])

  @@id([zid, courseId])
}

model Group {
  id              Int               @id @default(autoincrement())
  groupName       String            @unique
  description     String?
  groupOwnerId    String
  GroupOwner      Profile           @relation(fields: [groupOwnerId], references: [zid])
  GroupMembers    GroupJoined[]
  // projects        ProjectTaken[]
  interests       GroupInterest[]
  CombinedSkills  Skills[]
  MaxMembers      Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  ProjectInterest ProjectInterest[]
  Project         Project[]
}

model GroupJoined {
  zid          String
  profileOwner Profile @relation(fields: [zid], references: [zid])
  groupId      Int
  group        Group   @relation(fields: [groupId], references: [id])

  @@id([zid, groupId])
}

model GroupInterest {
  id           Int            @id @default(autoincrement())
  groupId      Int
  group        Group          @relation(fields: [groupId], references: [id])
  zid          String
  profileOwner Profile        @relation(fields: [zid], references: [zid])
  status       InterestStatus @default(PENDING)
  createdAt    DateTime       @default(now())

  @@unique([groupId, zid])
}

enum InterestStatus {
  PENDING
  ACCEPTED
  DENIED
}

model Project {
  id              Int               @id @default(autoincrement())
  title           String            @unique
  description     String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  ProjectOwner    Profile           @relation(fields: [projectOwnerId], references: [zid])
  projectOwnerId  String
  Group           Group[]
  skills          Skills[]
  ProjectInterest ProjectInterest[]
}

// model ProjectTaken {
//   projectId Int
//   project   Project          @relation(fields: [projectId], references: [id])
//   groupId   Int
//   group     Group            @relation(fields: [groupId], references: [id])
//   status    GroupEntryStatus @default(PENDING)

//   @@id([projectId, groupId])
//   @@index([status])
// }

model ProjectInterest {
  projectId Int
  project   Project        @relation(fields: [projectId], references: [id])
  groupId   Int
  group     Group          @relation(fields: [groupId], references: [id])
  status    InterestStatus @default(PENDING)
  createdAt DateTime       @default(now())

  @@id([projectId, groupId])
}

enum GroupEntryStatus {
  PENDING
  ACCEPTED
  DENIED
}

model Notification {
  zid      String   @id
  user     User     @relation(fields: [zid], references: [zid])
  action   String
  sentWhen DateTime @default(now())
  msgRead  Boolean  @default(false)
}

model Feedback {
  id          Int       @id @default(autoincrement())
  fromZid     String
  fromProfile Profile   @relation("FromProfile", fields: [fromZid], references: [zid])
  toZid       String
  toProfile   Profile   @relation("ToProfile", fields: [toZid], references: [zid])    
  comment     String    @db.Text
  rating      Int
  createdAt   DateTime  @default(now())

}
